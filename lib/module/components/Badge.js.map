{"version":3,"sources":["Badge.tsx"],"names":["React","Animated","StyleSheet","color","black","white","withTheme","defaultSize","Badge","children","size","style","theme","visible","rest","current","opacity","useRef","Value","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","memo","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle> & StyleProp<ViewStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    (StyleSheet.flatten(style) as ViewStyle) || ({} as ViewStyle);\n  const textColor = color(backgroundColor as string).isLight() ? black : white;\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default React.memo(withTheme(Badge));\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}