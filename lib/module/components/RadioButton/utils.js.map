{"version":3,"sources":["utils.ts"],"names":["handlePress","onPress","value","onValueChange","event","isChecked","status","contextValue","undefined"],"mappings":"AAEA,OAAO,MAAMA,WAAW,GAAG,CAAC;AAC1BC,EAAAA,OAD0B;AAE1BC,EAAAA,KAF0B;AAG1BC,EAAAA,aAH0B;AAI1BC,EAAAA;AAJ0B,CAAD,KAUrB;AACJD,EAAAA,aAAa,GAAGA,aAAa,CAACD,KAAD,CAAhB,GAA0BD,OAA1B,aAA0BA,OAA1B,uBAA0BA,OAAO,CAAGG,KAAH,CAA9C;AACD,CAZM;AAcP,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBH,EAAAA,KADwB;AAExBI,EAAAA,MAFwB;AAGxBC,EAAAA;AAHwB,CAAD,KAQnB;AACJ,MAAIA,YAAY,KAAKC,SAAjB,IAA8BD,YAAY,KAAK,IAAnD,EAAyD;AACvD,WAAOA,YAAY,KAAKL,KAAjB,GAAyB,SAAzB,GAAqC,WAA5C;AACD,GAFD,MAEO;AACL,WAAOI,MAAP;AACD;AACF,CAdM","sourcesContent":["import type { GestureResponderEvent } from 'react-native';\n\nexport const handlePress = ({\n  onPress,\n  value,\n  onValueChange,\n  event,\n}: {\n  onPress?: (event: GestureResponderEvent) => void;\n  value: string;\n  onValueChange?: (value: string) => void;\n  event: GestureResponderEvent;\n}) => {\n  onValueChange ? onValueChange(value) : onPress?.(event);\n};\n\nexport const isChecked = ({\n  value,\n  status,\n  contextValue,\n}: {\n  value: string;\n  status?: 'checked' | 'unchecked';\n  contextValue?: string;\n}) => {\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};\n"]}