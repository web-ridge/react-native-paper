{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","undefined","side","Left","AffixAdornmentPure","affix","onLayout","visible","paddingHorizontal","AffixAdornment","memo","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | undefined;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: undefined,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornmentPure: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst AffixAdornment = React.memo(AffixAdornmentPure);\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default React.memo(withTheme(TextInputAffix));\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]}