{"version":3,"sources":["TextInputOutlined.tsx"],"names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","Component","render","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","useMemo","colors","fonts","font","regular","hasActiveOutline","focused","flatten","fontSize","fontSizeStyle","fontWeight","height","backgroundColor","background","textAlign","viewStyle","activeColor","errorColor","inputTextColor","placeholderColor","outlineColor","cc","text","alpha","rgb","string","placeholder","primary","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","textInputStyle","input","textAlignVertical","paddingTop","paddingBottom","ref","underlineColorAndroid","memo","OutlinePure","outline","borderRadius","roundness","borderWidth","borderColor","Outline","create","position","paddingHorizontal","top","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps, LabelProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = React.useMemo(\n      () => getAdornmentConfig({ left, right }),\n      [left, right]\n    );\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const {\n      activeColor,\n      errorColor,\n      inputTextColor,\n      placeholderColor,\n      outlineColor,\n    } = React.useMemo(() => {\n      if (disabled) {\n        const cc = color(colors.text).alpha(0.54).rgb().string();\n        return {\n          activeColor: cc,\n          inputTextColor: cc,\n          placeholderColor: colors.disabled,\n          outlineColor: colors.disabled,\n          errorColor: colors.error,\n        };\n      } else {\n        return {\n          inputTextColor: colors.text,\n          placeholderColor: colors.placeholder,\n          outlineColor: colors.placeholder,\n          errorColor: colors.error,\n          activeColor: error ? colors.error : colors.primary,\n        };\n      }\n    }, [\n      colors.disabled,\n      colors.error,\n      colors.placeholder,\n      colors.primary,\n      colors.text,\n      disabled,\n      error,\n    ]);\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = React.useMemo(\n      () => calculateInputHeight(labelHeight, height, minInputHeight),\n      [height, labelHeight, minInputHeight]\n    );\n\n    const topPosition = React.useMemo(\n      () =>\n        calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP),\n      [inputHeight, labelHeight]\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = React.useMemo(\n      () => ({\n        height: height ? +height : null,\n        labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition,\n        fontSize,\n        label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(\n          dense ? styles.inputOutlinedDense : styles.inputOutlined\n        ) as Padding,\n      }),\n      [\n        dense,\n        fontScale,\n        fontSize,\n        height,\n        label,\n        labelHalfHeight,\n        multiline,\n        topPosition,\n      ]\n    );\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = React.useMemo(\n      () => adjustPaddingOut({ ...paddingSettings, pad }),\n      [pad, paddingSettings]\n    );\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps: LabelProps = React.useMemo(\n      () => ({\n        label,\n        onLayoutAnimatedText,\n        placeholderOpacity,\n        error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY,\n        baseLabelTranslateX,\n        font,\n        fontSize,\n        fontWeight,\n        labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition,\n        hasActiveOutline,\n        activeColor,\n        placeholderColor,\n        backgroundColor,\n        errorColor,\n        labelTranslationXOffset,\n      }),\n      [\n        activeColor,\n        backgroundColor,\n        baseLabelTranslateX,\n        baseLabelTranslateY,\n        error,\n        errorColor,\n        font,\n        fontSize,\n        fontWeight,\n        hasActiveOutline,\n        label,\n        labelScale,\n        labelTranslationXOffset,\n        onLayoutAnimatedText,\n        placeholderColor,\n        placeholderOpacity,\n        topPosition,\n      ]\n    );\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = React.useMemo(\n      () =>\n        getAdornmentStyleAdjustmentForNativeInput({\n          adornmentConfig,\n          rightAffixWidth,\n          leftAffixWidth,\n          mode: 'outlined',\n        }),\n      [adornmentConfig, leftAffixWidth, rightAffixWidth]\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    const textInputStyle = React.useMemo(\n      () => [\n        styles.input,\n        !multiline || (multiline && height) ? { height: inputHeight } : {},\n        paddingOut,\n        {\n          ...font,\n          fontSize,\n          fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign\n            ? textAlign\n            : I18nManager.isRTL\n            ? 'right'\n            : 'left',\n        },\n        adornmentStyleAdjustmentForNativeInput,\n      ],\n      [\n        adornmentStyleAdjustmentForNativeInput,\n        font,\n        fontSize,\n        fontWeight,\n        height,\n        inputHeight,\n        inputTextColor,\n        multiline,\n        paddingOut,\n        textAlign,\n      ]\n    );\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: textInputStyle,\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default React.memo(TextInputOutlined);\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: ColorValue | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst OutlinePure = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst Outline = React.memo(OutlinePure);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]}