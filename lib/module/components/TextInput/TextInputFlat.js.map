{"version":3,"sources":["TextInputFlat.tsx"],"names":["React","View","Animated","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","Component","render","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","colors","fonts","font","regular","hasActiveOutline","focused","flatten","fontSize","fontSizeStyle","fontWeight","height","paddingHorizontal","textAlign","viewStyle","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","paddingTop","paddingBottom","ref","underlineColorAndroid","input","textAlignVertical","Underline","underline","transform","scaleY","create","position","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : undefined;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : undefined;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={{\n            paddingTop: 0,\n            paddingBottom: 0,\n            minHeight,\n          }}\n        >\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            // @ts-ignore\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: ColorValue;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n});\n"]}