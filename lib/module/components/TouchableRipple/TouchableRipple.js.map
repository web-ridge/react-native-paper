{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","Pressable","View","StyleSheet","color","withTheme","Ripple","RippleStatus","getInteractionChildren","getInteractionStyle","useRadiusStyles","TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","centered","theme","rest","calculatedRippleColor","useMemo","colors","text","alpha","dark","rgb","string","rippleArray","setRippleArray","useState","handlePressIn","useCallback","e","onPressIn","button","currentTarget","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","newRipple","backgroundColor","left","top","animationDuration","status","Pressed","prev","onRemove","ripple","filter","p","handlePressOut","onPressOut","map","i","length","NotPressed","onPress","rippleContainerStyle","interactionState","styles","touchable","overflowHidden","Children","only","absoluteFill","overflowVisible","index","create","position","overflow","TouchableRippleWithTheme","TouchableRippleMemo","memo","supported"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Pressable,\n  View,\n  StyleSheet,\n  GestureResponderEvent,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport type { RippleType } from './Ripple';\nimport Ripple, { RippleStatus } from './Ripple';\nimport {\n  getInteractionChildren,\n  getInteractionStyle,\n  InteractionChildrenType,\n  InteractionState,\n  InteractionStyleType,\n  useRadiusStyles,\n} from './utils';\n\ntype Props = React.ComponentPropsWithRef<typeof Pressable> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n<<<<<<< HEAD\n   * Type of background drawable to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback.html#background\n=======\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n>>>>>>> 6b72d3e921217f600be45210bf15ee57674f95ac\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean | null;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: ColorValue;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: InteractionChildrenType;\n  style?: InteractionStyleType;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text selectable={false}>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * const MyComponentWithHover = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *     style={({ pressed, focused, hovered }) => [\n *       styles.normal,\n *       pressed && styles.pressed,\n *       focused && styles.focused,\n *       hovered && styles.hovered,\n *     ]}\n *   >\n *     {({ pressed, focused, hovered }) => (\n *       <Text>\n *         State:\n *         {[pressed && 'pressed', focused && 'focused', hovered && 'hovered']\n *           .filter((n) => n)\n *           .join(',')}\n *       </Text>\n *     )}\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Pressable props https://reactnative.dev/docs/pressable#props\n */\n\nfunction TouchableRipple({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  centered,\n  theme,\n  ...rest\n}: Props) {\n  const calculatedRippleColor = React.useMemo(\n    () =>\n      rippleColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.32 : 0.2)\n        .rgb()\n        .string(),\n    [rippleColor, theme.colors.text, theme.dark]\n  );\n\n  const [rippleArray, setRippleArray] = React.useState<RippleType[]>([]);\n\n  const handlePressIn = React.useCallback(\n    (e: GestureResponderEvent) => {\n      rest.onPressIn?.(e);\n      const button = e.currentTarget;\n\n      const dimensions = (button as any).getBoundingClientRect();\n\n      let touchX;\n      let touchY;\n\n      const { changedTouches, touches } = e.nativeEvent;\n      const touch = touches?.[0] ?? changedTouches?.[0];\n      // If centered or it was pressed using keyboard - enter or space\n      if (centered || !touch) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        touchX = touch.locationX ?? (e as any).pageX;\n        touchY = touch.locationY ?? (e as any).pageY;\n      }\n\n      const size = centered\n        ? // If ripple is always centered, we don't need to make it too big\n          Math.min(dimensions.width, dimensions.height) * 1.25\n        : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n          Math.max(dimensions.width, dimensions.height) * 2;\n\n      const newRipple: RippleType = {\n        style: {\n          backgroundColor: calculatedRippleColor,\n          left: touchX,\n          top: touchY,\n          width: size,\n          height: size,\n        },\n        animationDuration: Math.min(size * 1.5, 350),\n        status: RippleStatus.Pressed,\n      };\n\n      setRippleArray((prev) => [...prev, newRipple]);\n    },\n    [calculatedRippleColor, centered, rest.onPressIn]\n  );\n\n  const onRemove = React.useCallback(\n    (ripple: RippleType) => {\n      setRippleArray((prev) => prev.filter((p) => p !== ripple));\n    },\n    [setRippleArray]\n  );\n\n  const handlePressOut = React.useCallback(\n    (e: GestureResponderEvent) => {\n      rest.onPressOut?.(e);\n\n      setRippleArray((prev) =>\n        prev.map((p, i) =>\n          i === prev.length - 1 ? { ...p, status: RippleStatus.NotPressed } : p\n        )\n      );\n    },\n    [rest.onPressOut]\n  );\n\n  const disabled = disabledProp || !rest.onPress;\n  const rippleContainerStyle = useRadiusStyles(style);\n  return (\n    <Pressable\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n      style={(interactionState: InteractionState) => [\n        styles.touchable,\n        borderless && styles.overflowHidden,\n        getInteractionStyle(interactionState, style),\n      ]}\n    >\n      {(interactionState: InteractionState) => (\n        <>\n          {React.Children.only(\n            getInteractionChildren(interactionState, children)\n          )}\n          <View\n            style={[\n              StyleSheet.absoluteFill,\n              rippleContainerStyle,\n              centered ? styles.overflowVisible : styles.overflowHidden,\n            ]}\n            pointerEvents=\"none\"\n          >\n            {rippleArray.map((ripple, index) => (\n              <Ripple key={index} ripple={ripple} onRemove={onRemove} />\n            ))}\n          </View>\n        </>\n      )}\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  overflowVisible: {\n    overflow: 'visible',\n  },\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\nconst TouchableRippleWithTheme = withTheme(TouchableRipple);\nconst TouchableRippleMemo: typeof TouchableRippleWithTheme & {\n  supported: boolean;\n} = React.memo(TouchableRippleWithTheme) as any;\nTouchableRippleMemo.supported = true;\nexport default TouchableRippleMemo;\n"]}