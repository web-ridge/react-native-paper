{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["React","StyleSheet","Pressable","View","Platform","color","withTheme","getInteractionChildren","getInteractionStyle","useRadiusStyles","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","rippleContainerStyle","interactionState","styles","touchable","Children","only","pressed","OS","absoluteFill","backgroundColor","create","position","overflow"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,EAEEC,SAFF,EAGEC,IAHF,EAIEC,QAJF,QASO,cATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SACEC,sBADF,EAEEC,mBAFF,EAIEC,eAJF,QAKO,SALP;;AAmBA,MAAMC,eAAe,GAAG,UAUX;AAAA,MAVY;AACvBC,IAAAA,KAAK,EAALA,MADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA;AARuB,GAUZ;AAAA,MADRC,IACQ;;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACXX,KAAK,CAACiB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF;AAMA,QAAMC,oBAAoB,GAAGpB,eAAe,CAACE,MAAD,CAA5C;AACA,sBACE,oBAAC,SAAD,eACMS,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,cAAc,EAAE;AACdT,MAAAA,KAAK,EAAEO,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCY,qBAD3B;AAEdX,MAAAA;AAFc,KAHlB;AAOE,IAAA,KAAK,EAAGiB,gBAAD,IAAwC,CAC7CC,MAAM,CAACC,SADsC,EAE7CnB,UAAU,IAAIkB,MAAM,CAAClB,UAFwB,EAG7CL,mBAAmB,CAACsB,gBAAD,EAAmBnB,MAAnB,CAH0B;AAPjD,MAaImB,gBAAD,iBACC,0CACG9B,KAAK,CAACiC,QAAN,CAAeC,IAAf,CACC3B,sBAAsB,CAACuB,gBAAD,EAAmBZ,QAAnB,CADvB,CADH,EAIGY,gBAAgB,CAACK,OAAjB,IAA4B/B,QAAQ,CAACgC,EAAT,KAAgB,SAA5C,gBACC,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLnC,UAAU,CAACoC,YADN,EAELR,oBAFK,EAGL;AAAES,MAAAA,eAAe,EAAErB,aAAa,IAAIO;AAApC,KAHK;AADT,IADD,GAQG,IAZN,CAdJ,CADF;AAgCD,CApDD;;AAsDA,MAAMO,MAAM,GAAG9B,UAAU,CAACsC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,QAAQ,EAAE;AADD,GADoB;AAI/B3B,EAAAA,UAAU,EAAE;AACV4B,IAAAA,QAAQ,EAAE;AADA;AAJmB,CAAlB,CAAf;AASA,eAAenC,SAAS,CAACI,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  Pressable,\n  View,\n  Platform,\n  ColorValue,\n  ViewStyle,\n  GestureResponderEvent,\n  StyleProp,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport {\n  getInteractionChildren,\n  getInteractionStyle,\n  InteractionState,\n  useRadiusStyles,\n} from './utils';\n\ntype Props = React.ComponentProps<typeof Pressable> & {\n  borderless?: boolean;\n  background?: string;\n  disabled?: boolean;\n  onPress?: (event: GestureResponderEvent) => void | null;\n  rippleColor?: ColorValue;\n  underlayColor?: ColorValue;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n  const rippleContainerStyle = useRadiusStyles(style);\n  return (\n    <Pressable\n      {...rest}\n      disabled={disabled}\n      android_ripple={{\n        color: background != null ? background : calculatedRippleColor,\n        borderless,\n      }}\n      style={(interactionState: InteractionState) => [\n        styles.touchable,\n        borderless && styles.borderless,\n        getInteractionStyle(interactionState, style),\n      ]}\n    >\n      {(interactionState: InteractionState) => (\n        <>\n          {React.Children.only(\n            getInteractionChildren(interactionState, children)\n          )}\n          {interactionState.pressed && Platform.OS !== 'android' ? (\n            <View\n              style={[\n                StyleSheet.absoluteFill,\n                rippleContainerStyle,\n                { backgroundColor: underlayColor || calculatedRippleColor },\n              ]}\n            />\n          ) : null}\n        </>\n      )}\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}