{"version":3,"sources":["Ripple.tsx"],"names":["Div","props","RIPPLE_DURATION","RippleStatus","Pressed","NotPressed","Ripple","onRemove","ripple","status","animationDuration","style","onAnimationEnd","rippleStyles","container","show","hide","fromRippleStyle","transform","translateY","translateX","scale","toRippleStyle","StyleSheet","create","position","willChange","borderRadius","transformOrigin","animationTimingFunction","animationKeyframes","transitionDuration","transitionProperty","transitionTimingFunction","opacity"],"mappings":";;;;;;;;AAAA;;AAQA;;;;;;;;;;;;AAoBA,MAAMA,GAAG,GAAIC,KAAD,IAA6B,yCAAuB,KAAvB,EAA8BA,KAA9B,CAAzC;;AAEA,MAAMC,eAAe,GAAG,GAAxB;AAEO,MAAMC,YAAiD,GAAG;AAC/DC,EAAAA,OAAO,EAAE,SADsD;AAE/DC,EAAAA,UAAU,EAAE;AAFmD,CAA1D;;;AAKQ,SAASC,MAAT,CAAgB;AAC7BC,EAAAA,QAD6B;AAE7BC,EAAAA,MAF6B;AAG7BA,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,iBAAV;AAA6BC,IAAAA;AAA7B;AAHqB,CAAhB,EAOZ;AACD,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIH,MAAM,KAAKN,YAAY,CAACE,UAA5B,EAAwC;AACtCE,MAAAA,QAAQ,CAACC,MAAD,CAAR;AACD;AACF,GAJD;;AAMA,sBACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLK,YAAY,CAACC,SADR,EAELL,MAAM,KAAKN,YAAY,CAACC,OAAxB,GAAkCS,YAAY,CAACE,IAA/C,GAAsDF,YAAY,CAACG,IAF9D;AADT,kBAME,oBAAC,GAAD;AACE,IAAA,cAAc,EAAEJ,cADlB;AAEE,IAAA,KAAK,EAAE,CACLC,YAAY,CAACL,MADR,EAELG,KAFK,EAGL;AACE;AACAD,MAAAA,iBAAiB,YAAKA,iBAAL;AAFnB,KAHK;AAFT,IANF,CADF;AAoBD;;AAED,MAAMO,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,CACT;AAAEC,IAAAA,UAAU,EAAE;AAAd,GADS,EAET;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAFS,EAGT;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHS;AADW,CAAxB;AAQA,MAAMC,aAAa,GAAG;AACpBJ,EAAAA,SAAS,EAAE,CACT;AAAEC,IAAAA,UAAU,EAAE;AAAd,GADS,EAET;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAFS,EAGT;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHS;AADS,CAAtB;;AAQA,MAAMR,YAAY,GAAGU,wBAAWC,MAAX,CAAkB;AACrChB,EAAAA,MAAM;AACJiB,IAAAA,QAAQ,EAAE,UADN;AAGJC,IAAAA,UAAU,EAAE,WAHR;AAIJC,IAAAA,YAAY,EAAE,KAJV;AAKJC,IAAAA,eAAe,EAAE,QALb;AAMJlB,IAAAA,iBAAiB,YAAKR,eAAL,OANb;AAOJ2B,IAAAA,uBAAuB,EAAE;AAPrB,KAQDP,aARC;AASJ;AACAQ,IAAAA,kBAAkB,EAAE;AAClB,YAAMb,eADY;AAElB,cAAQK;AAFU;AAVhB,IAD+B;AAgBrCR,EAAAA,SAAS,EAAE;AACT;AACAiB,IAAAA,kBAAkB,SAFT;AAGTL,IAAAA,UAAU,EAAE,SAHH;AAITM,IAAAA,kBAAkB,EAAE,SAJX;AAKTC,IAAAA,wBAAwB,EAAE;AALjB,GAhB0B;AAuBrClB,EAAAA,IAAI,EAAE;AACJmB,IAAAA,OAAO,EAAE;AADL,GAvB+B;AA0BrClB,EAAAA,IAAI,EAAE;AACJkB,IAAAA,OAAO,EAAE;AADL;AA1B+B,CAAlB,CAArB","sourcesContent":["import {\n  StyleSheet,\n  View,\n  ViewProps,\n  //@ts-ignore\n  unstable_createElement,\n  ColorValue,\n} from 'react-native';\nimport * as React from 'react';\n\ntype RippleStatusType = 'pressed' | 'not_pressed';\n\nexport type RippleType = {\n  style: {\n    backgroundColor: ColorValue;\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  animationDuration: number;\n  status: RippleStatusType;\n};\n\ninterface AnimatedDivProps extends ViewProps {\n  onAnimationEnd?: () => any;\n}\n\nconst Div = (props: AnimatedDivProps) => unstable_createElement('div', props);\n\nconst RIPPLE_DURATION = 250;\n\nexport const RippleStatus: { [key: string]: RippleStatusType } = {\n  Pressed: 'pressed',\n  NotPressed: 'not_pressed',\n};\n\nexport default function Ripple({\n  onRemove,\n  ripple,\n  ripple: { status, animationDuration, style },\n}: {\n  ripple: RippleType;\n  onRemove: (ripple: RippleType) => any;\n}) {\n  const onAnimationEnd = () => {\n    if (status === RippleStatus.NotPressed) {\n      onRemove(ripple);\n    }\n  };\n\n  return (\n    <View\n      style={[\n        rippleStyles.container,\n        status === RippleStatus.Pressed ? rippleStyles.show : rippleStyles.hide,\n      ]}\n    >\n      <Div\n        onAnimationEnd={onAnimationEnd}\n        style={[\n          rippleStyles.ripple,\n          style,\n          {\n            // @ts-ignore\n            animationDuration: `${animationDuration}ms`,\n          },\n        ]}\n      />\n    </View>\n  );\n}\n\nconst fromRippleStyle = {\n  transform: [\n    { translateY: '-50%' as any },\n    { translateX: '-50%' as any },\n    { scale: '0.1' as any },\n  ],\n};\n\nconst toRippleStyle = {\n  transform: [\n    { translateY: '-50%' as any },\n    { translateX: '-50%' as any },\n    { scale: '1' as any },\n  ],\n};\n\nconst rippleStyles = StyleSheet.create({\n  ripple: {\n    position: 'absolute',\n\n    willChange: 'transform' as any,\n    borderRadius: '50%' as any,\n    transformOrigin: 'center',\n    animationDuration: `${RIPPLE_DURATION}ms`,\n    animationTimingFunction: 'linear',\n    ...toRippleStyle,\n    //@ts-ignore\n    animationKeyframes: {\n      '0%': fromRippleStyle,\n      '100%': toRippleStyle,\n    },\n  },\n  container: {\n    //@ts-ignore\n    transitionDuration: `250ms`,\n    willChange: 'opacity' as any,\n    transitionProperty: 'opacity',\n    transitionTimingFunction: 'linear',\n  },\n  show: {\n    opacity: 0.5,\n  },\n  hide: {\n    opacity: 0,\n  },\n});\n"]}