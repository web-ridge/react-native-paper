{"version":3,"sources":["Chip.tsx"],"names":["Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","current","elevation","React","useRef","Animated","Value","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","backgroundColor","surface","borderRadius","StyleSheet","flatten","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityState","styles","container","Platform","OS","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","fonts","regular","color","marginRight","marginLeft","closeButtonStyle","closeIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n\n  const {\n    backgroundColor = mode === 'outlined'\n      ? colors.surface\n      : dark\n      ? '#383838'\n      : '#ebebeb',\n    borderRadius = 16,\n  } = StyleSheet.flatten(style) || {};\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? (selectedColor as string)\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(\n        selectedColor !== undefined ? (selectedColor as string) : colors.text\n      )\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(\n        selectedColor !== undefined ? (selectedColor as string) : colors.text\n      )\n        .alpha(0.54)\n        .rgb()\n        .string();\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColor as string).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColor as string).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor as string)\n        .fade(0.5)\n        .rgb()\n        .string()\n    : selectedBackgroundColor;\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        style={{ borderRadius }}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <MaterialCommunityIcon\n                name=\"close-circle\"\n                size={16}\n                color={iconColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Chip);\n"]}