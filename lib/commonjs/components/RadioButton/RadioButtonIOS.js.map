{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","context","checked","contextValue","undefined","event","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","React","memo","RadioButtonIOSWithTheme"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;AAgBA,MAAMA,cAAc,GAAG,UAQV;AAAA,MARW;AACtBC,IAAAA,QADsB;AAEtBC,IAAAA,OAFsB;AAGtBC,IAAAA,KAHsB;AAItBC,IAAAA,MAJsB;AAKtBC,IAAAA,KALsB;AAMtBC,IAAAA;AANsB,GAQX;AAAA,MADRC,IACQ;;AACX,QAAMC,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAAN,CAAaR,QADY,GAEzBM,IAAI,CAACG,KAAL,IAAcP,KAAK,CAACM,MAAN,CAAaE,MAF/B;AAIA,MAAIC,WAAJ;;AAEA,MAAIX,QAAJ,EAAc;AACZW,IAAAA,WAAW,GAAG,oBAAMT,KAAK,CAACM,MAAN,CAAaI,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAd;AACD,GAFD,MAEO;AACLJ,IAAAA,WAAW,GAAG,oBAAMJ,YAAN,EACXS,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AAED,sBACE,oBAAC,oCAAD,CAAoB,QAApB,QACIE,OAAD,IAAsC;AACrC,UAAMC,OAAO,GACX,sBAAU;AACRC,MAAAA,YAAY,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEb,KADf;AAERD,MAAAA,MAFQ;AAGRC,MAAAA;AAHQ,KAAV,MAIO,SALT;AAOA,wBACE,oBAAC,wBAAD,eACME,IADN;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,WAAW,EAAEK,WAHf;AAIE,MAAA,OAAO,EACLX,QAAQ,GACJoB,SADI,GAEHC,KAAD,IAAW;AACT,gCAAY;AACVpB,UAAAA,OADU;AAEVG,UAAAA,KAFU;AAGVkB,UAAAA,aAAa,EAAEL,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEK,aAHd;AAIVD,UAAAA;AAJU,SAAZ;AAMD,OAdT;AAgBE,MAAA,iBAAiB,EAAC,OAhBpB;AAiBE,MAAA,kBAAkB,EAAE;AAAErB,QAAAA,QAAF;AAAYkB,QAAAA;AAAZ,OAjBtB;AAkBE,MAAA,uBAAuB,EAAC,QAlB1B;AAmBE,MAAA,KAAK,EAAEK,MAAM,CAACC,SAnBhB;AAoBE,MAAA,MAAM,EAAEnB;AApBV,qBAsBE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEoB,QAAAA,OAAO,EAAEP,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,oBACE,oBAAC,8BAAD;AACE,MAAA,gBAAgB,EAAE,KADpB;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,IAAI,EAAE,EAHR;AAIE,MAAA,KAAK,EAAEX,YAJT;AAKE,MAAA,SAAS,EAAC;AALZ,MADF,CAtBF,CADF;AAkCD,GA3CH,CADF;AA+CD,CAvED;;AAyEAR,cAAc,CAAC2B,WAAf,GAA6B,iBAA7B;;AAEA,MAAMH,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;4BAOeC,KAAK,CAACC,IAAN,CAAW,wBAAUjC,cAAV,CAAX,C,EAEf;;;;AACA,MAAMkC,uBAAuB,GAAG,wBAAUlC,cAAV,CAAhC,C,CACA","sourcesContent":["import * as React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: ColorValue;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor as string)\n      .fade(0.32)\n      .rgb()\n      .string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default React.memo(withTheme(RadioButtonIOS));\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]}