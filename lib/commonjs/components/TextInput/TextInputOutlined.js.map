{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","render","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","React","useMemo","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSize","fontSizeStyle","fontWeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","activeColor","errorColor","inputTextColor","placeholderColor","outlineColor","cc","text","alpha","rgb","string","placeholder","primary","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","textInputStyle","input","color","textAlignVertical","paddingTop","paddingBottom","LabelBackground","ref","underlineColorAndroid","memo","OutlinePure","outline","borderRadius","roundness","borderWidth","borderColor","Outline","create","position","paddingHorizontal","top","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps, LabelProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nfunction TextInputOutlined(props: ChildTextInputProps) {\n  const {\n    disabled = false,\n    editable = false,\n    label,\n    error = false,\n    selectionColor,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    underlineColor,\n    dense,\n    style,\n    theme,\n    render = (props: RenderProps) => <NativeTextInput {...props} />,\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    ...rest\n  } = props;\n\n  const adornmentConfig = React.useMemo(\n    () => getAdornmentConfig({ left, right }),\n    [left, right]\n  );\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    activeColor,\n    errorColor,\n    inputTextColor,\n    placeholderColor,\n    outlineColor,\n  } = React.useMemo(() => {\n    if (disabled) {\n      const cc = color(colors.text).alpha(0.54).rgb().string();\n      return {\n        activeColor: cc,\n        inputTextColor: cc,\n        placeholderColor: colors.disabled,\n        outlineColor: colors.disabled,\n        errorColor: colors.error,\n      };\n    }\n    return {\n      inputTextColor: colors.text,\n      placeholderColor: colors.placeholder,\n      outlineColor: colors.placeholder,\n      errorColor: colors.error,\n      activeColor: error ? colors.error : colors.primary,\n    };\n  }, [\n    colors.disabled,\n    colors.error,\n    colors.placeholder,\n    colors.primary,\n    colors.text,\n    disabled,\n    error,\n  ]);\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = React.useMemo(\n    () => calculateInputHeight(labelHeight, height, minInputHeight),\n    [height, labelHeight, minInputHeight]\n  );\n\n  const topPosition = React.useMemo(\n    () =>\n      calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP),\n    [inputHeight, labelHeight]\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = React.useMemo(\n    () => ({\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    }),\n    [\n      dense,\n      fontScale,\n      fontSize,\n      height,\n      label,\n      labelHalfHeight,\n      multiline,\n      topPosition,\n    ]\n  );\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = React.useMemo(\n    () => adjustPaddingOut({ ...paddingSettings, pad }),\n    [pad, paddingSettings]\n  );\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps: LabelProps = React.useMemo(\n    () => ({\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n      labelTranslationXOffset,\n    }),\n    [\n      activeColor,\n      backgroundColor,\n      baseLabelTranslateX,\n      baseLabelTranslateY,\n      error,\n      errorColor,\n      font,\n      fontSize,\n      fontWeight,\n      hasActiveOutline,\n      label,\n      labelScale,\n      labelTranslationXOffset,\n      onLayoutAnimatedText,\n      placeholderColor,\n      placeholderOpacity,\n      topPosition,\n    ]\n  );\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput = React.useMemo(\n    () =>\n      getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }),\n    [adornmentConfig, leftAffixWidth, rightAffixWidth]\n  );\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: props.parentState.labeled,\n    };\n  }\n\n  const textInputStyle = React.useMemo(\n    () => [\n      styles.input,\n      !multiline || (multiline && height) ? { height: inputHeight } : {},\n      paddingOut,\n      {\n        ...font,\n        fontSize,\n        fontWeight,\n        color: inputTextColor,\n        textAlignVertical: multiline ? 'top' : 'center',\n        textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left',\n      },\n      adornmentStyleAdjustmentForNativeInput,\n    ],\n    [\n      adornmentStyleAdjustmentForNativeInput,\n      font,\n      fontSize,\n      fontWeight,\n      height,\n      inputHeight,\n      inputTextColor,\n      multiline,\n      paddingOut,\n      textAlign,\n    ]\n  );\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <View>\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View\n          style={{\n            paddingTop: LABEL_PADDING_TOP,\n            paddingBottom: 0,\n            minHeight,\n          }}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n          />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : props.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: textInputStyle,\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n}\n\nexport default React.memo(TextInputOutlined);\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: ColorValue | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst OutlinePure = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst Outline = React.memo(OutlinePure);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]}