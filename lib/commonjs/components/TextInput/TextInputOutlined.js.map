{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","Component","render","props","disabled","editable","label","error","selectionColor","underlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","useMemo","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSize","fontSizeStyle","fontWeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","activeColor","errorColor","inputTextColor","placeholderColor","outlineColor","cc","text","alpha","rgb","string","placeholder","primary","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","textInputStyle","input","color","textAlignVertical","paddingTop","paddingBottom","LabelBackground","ref","underlineColorAndroid","memo","OutlinePure","outline","borderRadius","roundness","borderWidth","borderColor","Outline","create","position","paddingHorizontal","top","bottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps, LabelProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = React.useMemo(\n      () => getAdornmentConfig({ left, right }),\n      [left, right]\n    );\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const {\n      activeColor,\n      errorColor,\n      inputTextColor,\n      placeholderColor,\n      outlineColor,\n    } = React.useMemo(() => {\n      if (disabled) {\n        const cc = color(colors.text).alpha(0.54).rgb().string();\n        return {\n          activeColor: cc,\n          inputTextColor: cc,\n          placeholderColor: colors.disabled,\n          outlineColor: colors.disabled,\n          errorColor: colors.error,\n        };\n      } else {\n        return {\n          inputTextColor: colors.text,\n          placeholderColor: colors.placeholder,\n          outlineColor: colors.placeholder,\n          errorColor: colors.error,\n          activeColor: error ? colors.error : colors.primary,\n        };\n      }\n    }, [\n      colors.disabled,\n      colors.error,\n      colors.placeholder,\n      colors.primary,\n      colors.text,\n      disabled,\n      error,\n    ]);\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = React.useMemo(\n      () => calculateInputHeight(labelHeight, height, minInputHeight),\n      [height, labelHeight, minInputHeight]\n    );\n\n    const topPosition = React.useMemo(\n      () =>\n        calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP),\n      [inputHeight, labelHeight]\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = React.useMemo(\n      () => ({\n        height: height ? +height : null,\n        labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition,\n        fontSize,\n        label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(\n          dense ? styles.inputOutlinedDense : styles.inputOutlined\n        ) as Padding,\n      }),\n      [\n        dense,\n        fontScale,\n        fontSize,\n        height,\n        label,\n        labelHalfHeight,\n        multiline,\n        topPosition,\n      ]\n    );\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = React.useMemo(\n      () => adjustPaddingOut({ ...paddingSettings, pad }),\n      [pad, paddingSettings]\n    );\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps: LabelProps = React.useMemo(\n      () => ({\n        label,\n        onLayoutAnimatedText,\n        placeholderOpacity,\n        error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY,\n        baseLabelTranslateX,\n        font,\n        fontSize,\n        fontWeight,\n        labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition,\n        hasActiveOutline,\n        activeColor,\n        placeholderColor,\n        backgroundColor,\n        errorColor,\n        labelTranslationXOffset,\n      }),\n      [\n        activeColor,\n        backgroundColor,\n        baseLabelTranslateX,\n        baseLabelTranslateY,\n        error,\n        errorColor,\n        font,\n        fontSize,\n        fontWeight,\n        hasActiveOutline,\n        label,\n        labelScale,\n        labelTranslationXOffset,\n        onLayoutAnimatedText,\n        placeholderColor,\n        placeholderOpacity,\n        topPosition,\n      ]\n    );\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = React.useMemo(\n      () =>\n        getAdornmentStyleAdjustmentForNativeInput({\n          adornmentConfig,\n          rightAffixWidth,\n          leftAffixWidth,\n          mode: 'outlined',\n        }),\n      [adornmentConfig, leftAffixWidth, rightAffixWidth]\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    const textInputStyle = React.useMemo(\n      () => [\n        styles.input,\n        !multiline || (multiline && height) ? { height: inputHeight } : {},\n        paddingOut,\n        {\n          ...font,\n          fontSize,\n          fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign\n            ? textAlign\n            : I18nManager.isRTL\n            ? 'right'\n            : 'left',\n        },\n        adornmentStyleAdjustmentForNativeInput,\n      ],\n      [\n        adornmentStyleAdjustmentForNativeInput,\n        font,\n        fontSize,\n        fontWeight,\n        height,\n        inputHeight,\n        inputTextColor,\n        multiline,\n        paddingOut,\n        textAlign,\n      ]\n    );\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: textInputStyle,\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default React.memo(TextInputOutlined);\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: ColorValue | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst OutlinePure = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst Outline = React.memo(OutlinePure);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]}